// script.js

function expenseTracker() {
    return {
        // ‚ú® Êñ∞Â¢ûÔºöÁî®ÊñºÊéßÂà∂ÊâãÊ©üÁâà Tab ÁöÑÁãÄÊÖãÔºå'info' ÊòØÈ†êË®≠ÈñãÂïüÁöÑ Tab
        activeTab: 'info', 

        // ÁãÄÊÖã (State)
        userName: '',
        dailyBudget: 0,
        totalSpent: 0,
        expenses: [],
        categoryTotals: { food: 0, transport: 0, entertainment: 0, daily: 0 },
        userInput: { name: '', budget: null },
        newExpense: { category: '', description: '', amount: null },
        editingExpenseId: null,
        editedExpense: { description: '', amount: null },

        // ÈùúÊÖãË≥áÊñô
        quotes: [
            "ÊâìÂ∑•Ë≥∫Èå¢‰∏çÂÆπÊòìÔºåÊØè‰∏ÄÂàÜÈå¢ÈÉΩË¶ÅÁ≤æÊâìÁ¥∞ÁÆó„ÄÇ", "ÂÅ∂ÁàæËä±ÈªûÈå¢ÁäíË≥ûËá™Â∑±ÔºåÈÄôÊòØÊáâË©≤ÁöÑ„ÄÇ", "ÂóØ...Ëä±Ë≤ªÊúâÈªûË∂ÖÂá∫È†êÊúüÔºåÈúÄË¶ÅÊéßÂà∂‰∏Ä‰∏ã„ÄÇ",
            "ÈÄôÂÄãÊ∂àË≤ªÈÄüÂ∫¶ÊúâÈªûÂø´ÔºåÂæóÈáçÊñ∞Ê™¢Ë¶ñÈ†êÁÆó„ÄÇ", "ÊÉÖÊ≥ÅÈñãÂßã‰∏çÂ¶ôÔºåÈÄôÂÄãÊúàÂèØËÉΩÊúÉÂæàÁ∑ä„ÄÇ", "ÂøÖÈ†àÂÜ∑Èùú‰∏ã‰æÜÔºå‰∏çËÉΩÂÜçÈÄôÊ®£‰∫ÇËä±Èå¢‰∫Ü„ÄÇ",
            "Á≥üÁ≥ïÔºåÁÖßÈÄôÊ®£‰∏ãÂéªÊúÉÂÖ•‰∏çÊï∑Âá∫„ÄÇ", "ÂÆå‰∫ÜÔºåÁîüÊ¥ªË≤ªÈÉΩÂø´‰∏çÂ§†‰∫Ü„ÄÇ", "ÈÄô‰∏ãÁúüÁöÑÈ∫ªÁÖ©‰∫ÜÔºåÈå¢ÂåÖÂø´Ë¶ãÂ∫ï‰∫Ü„ÄÇ", "ÂæπÂ∫ïÁ†¥Áî¢ÔºåÈÄ£Âü∫Êú¨ÁîüÊ¥ªÈÉΩÊàêÂïèÈ°å‰∫Ü„ÄÇ"
        ],
        categoryMeta: {
            food: { icon: 'üçΩÔ∏è', name: 'È§êÈ£≤' },
            transport: { icon: 'üöå', name: '‰∫§ÈÄö' },
            entertainment: { icon: 'üéÆ', name: 'Â®õÊ®Ç' },
            daily: { icon: 'üß¥', name: 'Êó•Áî®ÂìÅ' }
        },

        // Ë°çÁîüÁãÄÊÖã (Getters)
        get remainingAmount() { return Math.max(0, this.dailyBudget - this.totalSpent) },
        get percentage() { return this.dailyBudget > 0 ? Math.round((this.totalSpent / this.dailyBudget) * 100) : 0 },
        get level() { return Math.min(Math.floor(this.percentage / 10), 7) },
        get currentQuote() { return this.quotes[this.level] },
        get currentCharacterImage() {
            return Character.getImageByLevel(this.level);
        },

        // ÊñπÊ≥ï (Actions)
        setUserInfo() {
            if (this.userInput.name && this.userInput.budget > 0) {
                this.userName = this.userInput.name;
                this.dailyBudget = this.userInput.budget;
                this.userInput.name = '';
                this.userInput.budget = null;
            } else {
                alert('Ë´ãÁ¢∫‰øùÂ∑≤Ëº∏ÂÖ•ÂßìÂêçÔºå‰∏îÈ†êÁÆóÈáëÈ°çÂ§ßÊñº 0 ÔºÅ');
            }
        },

        addExpense() {
            if (!this.newExpense.category || !this.newExpense.description || !(this.newExpense.amount > 0)) {
                alert('Ë´ãÂ°´ÂØ´ÂÆåÊï¥ÁöÑËä±Ë≤ªË≥áË®äÔºÅ');
                return;
            }
            const expenseToAdd = {
                id: Date.now(),
                ...this.newExpense,
                icon: this.categoryMeta[this.newExpense.category].icon,
                categoryName: this.categoryMeta[this.newExpense.category].name
            };
            this.expenses.unshift(expenseToAdd);
            this.totalSpent += this.newExpense.amount;
            this.categoryTotals[this.newExpense.category] += this.newExpense.amount;
            this.newExpense.category = '';
            this.newExpense.description = '';
            this.newExpense.amount = null;
        },

        // Âà™Èô§Ëä±Ë≤ª
        deleteExpense(id) {
            const index = this.expenses.findIndex(expense => expense.id === id);
            if (index > -1) {
                const expenseToDelete = this.expenses[index];
                this.totalSpent -= expenseToDelete.amount;
                this.categoryTotals[expenseToDelete.category] -= expenseToDelete.amount;
                this.expenses.splice(index, 1);
            }
        },

        // ÈñãÂßãÁ∑®ËºØ
        editExpense(expense) {
            this.editingExpenseId = expense.id;
            this.editedExpense.description = expense.description;
            this.editedExpense.amount = expense.amount;
        },

        // Êõ¥Êñ∞Ëä±Ë≤ª
        updateExpense() {
            if (!this.editedExpense.description || !(this.editedExpense.amount > 0)) {
                alert('Ë´ãÁ¢∫‰øùËä±Ë≤ªÁ¥∞ÁØÄÂíåÈáëÈ°çÈÉΩÂ∑≤Â°´ÂØ´ÔºÅ');
                return;
            }
            const index = this.expenses.findIndex(expense => expense.id === this.editingExpenseId);
            if (index > -1) {
                const originalExpense = this.expenses[index];
                const amountDifference = this.editedExpense.amount - originalExpense.amount;
                
                this.totalSpent += amountDifference;
                this.categoryTotals[originalExpense.category] += amountDifference;

                originalExpense.description = this.editedExpense.description;
                originalExpense.amount = this.editedExpense.amount;
            }
            this.cancelEdit();
        },

        // ÂèñÊ∂àÁ∑®ËºØ
        cancelEdit() {
            this.editingExpenseId = null;
            this.editedExpense.description = '';
            this.editedExpense.amount = null;
        }
    };
}